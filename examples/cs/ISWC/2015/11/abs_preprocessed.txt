In this paper we tackle the problem of answering SPARQL queries over virtually integrated databases.
we assume that the entity resolution problem has already been solved.
explicit information is available about which records in the different databases refer to the same real world entity.
the standard Ontology-Based Data Access setting to take into account these DB links for SPARQL query-answering.
Surprisingly, to the best of our knowledge, there has been no attempt to extend the standard Ontology-Based Data Access.
the standard Ontology-Based Data Access setting to take into account these DB links for consistency checking.
This is partly because the OWL built-in owl: the most natural representation of links between data sets, is not included in the de facto ontology language for the standard Ontology-Based Data Access.
This is partly because the OWL built-in owl: sameAs property , is not included in the de facto ontology language for the standard Ontology-Based Data Access.
This is partly because the OWL built-in owl: sameAs property , is not included in OWL 2 QL .
This is partly because the OWL built-in owl: the most natural representation of links between data sets, is not included in OWL 2 QL .
our formally treat several fundamental questions in this context: how links over database identifiers can be represented in terms of owl: sameAs statements, how to check consistency.
our formally treat several fundamental questions in this context: how links over database identifiers can be represented in terms of owl: sameAs statements, how to recover rewritability of SPARQL into SQL ( lost because of owl ).
our formally treat several fundamental questions in this context: how links over database identifiers can be represented in terms of owl: sameAs statements, how to recover rewritability of SPARQL into SQL ( lost because of sameAs statements ).
Moreover, our investigate how our solution can be made to scale up to large enterprise datasets.
our carried out an extensive set of experiments.
our have implemented the approach.
experiments showing our scalability.