Recently, Triple Pattern Fragments were introduced as a low-cost server-side interface.
a low-cost server-side interface when high numbers of clients need to evaluate sparql queries.
Scalability is achieved by moving part of the query execution to the client, at the cost of elevated query times.
Since the Triple Pattern Fragments interface purposely does not support complex constructs such as sparql filters, queries need to be executed mostly on the client, resulting in long execution times.
queries that use sparql filters.
We therefore investigated the impact of adding a literal substring matching feature to the Triple Pattern Fragments interface, with the goal of improving query performance while maintaining low server cost.
In this paper, We compare the performance of sparql queries on multiple implementations, including case-insensitive fm-index.
In this paper, We compare the performance of sparql queries on multiple implementations, including Elastic Search.
In this paper, We discuss the clientserver setup.
We evaluations indicate that these improvements allow for faster query execution without significantly increasing the load on the server.
Offering the substring feature on Triple Pattern Fragment servers allows users to obtain faster responses for filter-based sparql queries.
Furthermore, substring matching can be used to support other filters such as complete regular expressions.
Furthermore, substring matching can be used to support other filters such as range queries.