Works on knowledge graphs often focus either on frameworks for graph analytics where there has been little work in trying to combine both approaches.
Works on graph-based data management often focus either on frameworks for graph analytics where there has been little work in trying to combine both approaches.
Works on graph-based data management often focus either on graph query languages where there has been little work in trying to combine both approaches.
Works on knowledge graphs often focus either on graph query languages where there has been little work in trying to combine both approaches.
the appropriate data which is then enriched with analytics.
the appropriate data which is then possibly filtered again with other data by means of a query language.
the appropriate data which is then possibly combined again with other data by means of a query language.
However, many real-world tasks conceptually involve combinations of these approaches: a graph query can be used to select the appropriate data.
a language that is well-suited for analytical tasks.
In this paper we propose a language.
a language that is well-suited for both graph querying.
We propose a minimalistic extension of SPARQL to allow for expressing analytical tasks over existing SPARQL infrastructure; in particular, We propose to extend SPARQL with recursive features.
We propose a minimalistic extension of SPARQL to allow for expressing analytical tasks over existing SPARQL infrastructure; in particular, We propose to provide a formal syntax and semantics for our language.
We show that our language can express key analytical tasks on graphs ( in fact, our language is Turing complete ).
Moreover, queries in this language can also be compiled into sequences of iterations of SPARQL update statements.
We show how procedures in We can be implemented over off-the-shelf SPARQL engines, with a specialised client.
a specialised client that can leverage database operations to improve the performance of queries.
Results for We implementation show that procedures for popular analytics currently run in seconds for selective sub-graphs ( our target use-case ).
Results for We implementation show that procedures for popular analytics currently run in minutes for selective sub-graphs ( our target use-case ).