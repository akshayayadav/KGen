OPTIONAL is a key feature in SPARQL for dealing with missing information.
While this operator is used extensively, this operator is also known for this operator complexity, which can make efficient evaluation of queries with OPTIONAL challenging.
We tackle this problem in the Ontology-Based Data Access -LRB- OBDA -RRB- setting, where the data is stored in a SQL relational database and exposed as a virtual RDF graph by means of an R2RML mapping.
We start with a succinct translation of a SPARQL fragment into SQL.
a succinct translation of a SPARQL fragment fully respects three-valued logic and relies on the extensive use of the LEFT JOIN operator function.
a succinct translation of a SPARQL fragment fully respects three-valued logic JOIN COALESCE function.
a succinct translation of a SPARQL fragment relies on the extensive use of the LEFT JOIN COALESCE function.
a succinct translation of a SPARQL fragment fully respects bag semantics JOIN COALESCE function.
a succinct translation of a SPARQL fragment relies on the extensive use of the LEFT JOIN COALESCE function.
a succinct translation of a SPARQL fragment fully respects bag semantics and relies on the extensive use of the LEFT JOIN operator function.
We then propose optimisation techniques for reducing the size.
We then propose optimisation techniques for improving the structure of generated SQL queries.
We optimisations capture interactions between JOIN, the LEFT JOIN, integrity constraints such as attribute nullability.
We optimisations capture interactions between JOIN, the LEFT JOIN, integrity constraints such as foreign key constraints.
We optimisations capture interactions between JOIN, the LEFT JOIN, integrity constraints such as uniqueness.
We optimisations capture interactions between JOIN, the LEFT JOIN, COALESCE.
Finally, We empirically verify effectiveness of We techniques on the BSBM OBDA benchmark.