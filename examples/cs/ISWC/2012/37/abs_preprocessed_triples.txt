0	"centralised approaches"	rdfs:subClassOf	"approaches"
0	"live"	vn.role:Theme	"centralised approaches"
0	"live"	local:AM-MOD	"can"
0	"live"	local:AM-MNR	"efficiently"
0	"decentralised approaches"	rdfs:subClassOf	"approaches"
0	"decentralised"	rdfs:member	"decentralised approaches"
0	"live"	vn.role:Location	"decentralised approaches"
1	"cached"	vn.role:Theme	"data"
1	"parts of web"	local:of_web	"parts"
1	"parts of web"	local:parts_of	"web"
1	"cached"	vn.role:other	"parts of web"
2	"centralised approaches"	rdfs:subClassOf	"approaches"
2	"answer"	vn.role:Agent	"centralised approaches"
2	"answer"	local:AM-MOD	"can"
2	"answer"	local:AM-MNR	"efficiently"
2	"queries over data"	local:over_data	"queries"
2	"queries over data"	local:queries_over	"data"
2	"answer"	vn.role:Predicate	"queries over data"
3	"decentralised approaches"	rdfs:subClassOf	"approaches"
3	"provide"	vn.role:Recipient	"decentralised approaches"
3	"provide"	local:AM-MOD	"can"
3	"entire"	rdfs:member	"entire web"
3	"fresher results"	rdfs:subClassOf	"results"
3	"fresher"	rdfs:member	"fresher results"
3	"entire web"	rdfs:subClassOf	"web"
3	"fresher results over entire web"	local:over_entireweb	"fresher results"
3	"fresher results over entire web"	local:fresherresults_over	"entire web"
3	"provide"	vn.role:Agent	"fresher results over entire web"
3	"response"	rdfs:member	"response times"
3	"slower response"	rdfs:subClassOf	"response"
3	"slower response times"	rdfs:subClassOf	"times"
3	"slower response"	rdfs:member	"slower response times"
3	"response times"	rdfs:subClassOf	"times"
3	"slower"	rdfs:member	"slower response"
3	"slower response times"	rdfs:subClassOf	"response times"
3	"cost of slower response times"	local:of_slowerresponsetimes	"cost"
3	"cost of slower response times"	local:cost_of	"slower response times"
3	"provide"	vn.role:indirect_object	"cost of slower response times"
5	"propose"	vn.role:Agent	"we"
5	"execution approach"	rdfs:subClassOf	"approach"
5	"hybrid query execution"	rdfs:subClassOf	"execution"
5	"query execution approach"	rdfs:subClassOf	"approach"
5	"execution"	rdfs:member	"execution approach"
5	"query execution"	rdfs:member	"query execution approach"
5	"query"	rdfs:member	"query execution"
5	"hybrid query execution"	rdfs:member	"hybrid query execution approach"
5	"hybrid"	rdfs:member	"hybrid query"
5	"hybrid query"	rdfs:subClassOf	"query"
5	"hybrid query execution approach"	rdfs:subClassOf	"approach"
5	"hybrid query"	rdfs:member	"hybrid query execution"
5	"query execution"	rdfs:subClassOf	"execution"
5	"query execution approach"	rdfs:subClassOf	"execution approach"
5	"hybrid query execution approach"	rdfs:subClassOf	"query execution approach"
5	"propose"	vn.role:Topic	"hybrid query execution approach"
5	"live scenario"	rdfs:subClassOf	"scenario"
5	"up results"	rdfs:subClassOf	"results"
5	"up"	rdfs:member	"up results"
5	"live"	rdfs:member	"live scenario"
5	"results vs. live scenario"	local:vs._livescenario	"results"
5	"results vs. live scenario"	local:results_vs.	"live scenario"
5	"propose"	local:AM-TMP	"speeding"
5	"speeding"	vn.role:Agent	"herein"
5	"speeding"	vn.role:Theme	"results"
6	"execution approach"	rdfs:subClassOf	"approach"
6	"hybrid query execution"	rdfs:subClassOf	"execution"
6	"query execution approach"	rdfs:subClassOf	"approach"
6	"execution"	rdfs:member	"execution approach"
6	"query execution"	rdfs:member	"query execution approach"
6	"query"	rdfs:member	"query execution"
6	"hybrid query execution"	rdfs:member	"hybrid query execution approach"
6	"hybrid"	rdfs:member	"hybrid query"
6	"hybrid query"	rdfs:subClassOf	"query"
6	"hybrid query execution approach"	rdfs:subClassOf	"approach"
6	"hybrid query"	rdfs:member	"hybrid query execution"
6	"query execution"	rdfs:subClassOf	"execution"
6	"query execution approach"	rdfs:subClassOf	"execution approach"
6	"hybrid query execution approach"	rdfs:subClassOf	"query execution approach"
6	"returns"	vn.role:Agent	"hybrid query execution approach"
6	"fresher results"	rdfs:subClassOf	"results"
6	"fresher"	rdfs:member	"fresher results"
6	"returns"	vn.role:Theme	"fresher results"
6	"centralised scenario"	rdfs:subClassOf	"scenario"
6	"broader"	rdfs:member	"broader range"
6	"centralised"	rdfs:member	"centralised scenario"
6	"broader range"	rdfs:subClassOf	"range"
6	"broader range of sources"	local:of_sources	"broader range"
6	"broader range of sources"	local:broaderrange_of	"sources"
6	"broader range of sources vs. centralised scenario"	local:vs._centralisedscenario	"broader range of sources"
6	"broader range of sources vs. centralised scenario"	local:broaderrangeofsources_vs.	"centralised scenario"
6	"returns"	vn.role:other	"broader range of sources vs. centralised scenario"
7	"compare"	vn.role:Patient1	"we"
7	"compare"	local:AM-TMP	"first"
7	"current"	rdfs:member	"current versions"
7	"data sources"	rdfs:subClassOf	"sources"
7	"public"	rdfs:member	"public sparql"
7	"sparql"	rdfs:member	"sparql stores"
7	"public sparql"	rdfs:subClassOf	"sparql"
7	"public sparql stores"	rdfs:subClassOf	"stores"
7	"current versions"	rdfs:subClassOf	"versions"
7	"public sparql"	rdfs:member	"public sparql stores"
7	"sparql stores"	rdfs:subClassOf	"stores"
7	"data"	rdfs:member	"data sources"
7	"often missing"	rdfs:subClassOf	"missing"
7	"are often missing"	rdfs:subClassOf	"often missing"
7	"cache cache"	rdfs:subClassOf	"cache"
7	"linked data"	rdfs:subClassOf	"data"
7	"public sparql stores"	rdfs:subClassOf	"sparql stores"
7	"two public sparql stores"	rdfs:subClassOf	"public sparql stores"
7	"linked data"	rdfs:subClassOf	"data"
7	"public sparql stores"	rdfs:subClassOf	"sparql stores"
7	"two public sparql stores"	rdfs:subClassOf	"public sparql stores"
7	"results from two public sparql stores"	local:from_twopublicsparqlstores	"results"
7	"results from two public sparql stores"	local:results_from	"two public sparql stores"
7	"two public sparql stores against current versions"	local:against_currentversions	"two public sparql stores"
7	"two public sparql stores against current versions"	local:twopublicsparqlstores_against	"current versions"
7	"current versions of linked data"	local:of_linkeddata	"current versions"
7	"current versions of linked data"	local:currentversions_of	"linked data"
7	"two public sparql stores against current versions"	local:against_currentversions	"two public sparql stores"
7	"two public sparql stores against current versions"	local:twopublicsparqlstores_against	"current versions"
7	"current versions of linked data"	local:of_linkeddata	"current versions"
7	"current versions of linked data"	local:currentversions_of	"linked data"
7	"compare"	vn.role:Patient2	"results from two public sparql stores"
7	"cache"	vn.role:Agent	"they"
7	"cache"	vn.role:Theme	"cache"
8	"compare"	vn.role:Patient1	"we"
8	"compare"	local:AM-TMP	"first"
8	"current"	rdfs:member	"current versions"
8	"data sources"	rdfs:subClassOf	"sources"
8	"public"	rdfs:member	"public sparql"
8	"sparql"	rdfs:member	"sparql stores"
8	"public sparql"	rdfs:subClassOf	"sparql"
8	"public sparql stores"	rdfs:subClassOf	"stores"
8	"current versions"	rdfs:subClassOf	"versions"
8	"public sparql"	rdfs:member	"public sparql stores"
8	"sparql stores"	rdfs:subClassOf	"stores"
8	"data"	rdfs:member	"data sources"
8	"cache cache"	rdfs:subClassOf	"cache"
8	"linked data"	rdfs:subClassOf	"data"
8	"public sparql stores"	rdfs:subClassOf	"sparql stores"
8	"two public sparql stores"	rdfs:subClassOf	"public sparql stores"
8	"linked data"	rdfs:subClassOf	"data"
8	"public sparql stores"	rdfs:subClassOf	"sparql stores"
8	"two public sparql stores"	rdfs:subClassOf	"public sparql stores"
8	"results from two public sparql stores"	local:from_twopublicsparqlstores	"results"
8	"results from two public sparql stores"	local:results_from	"two public sparql stores"
8	"two public sparql stores against current versions"	local:against_currentversions	"two public sparql stores"
8	"two public sparql stores against current versions"	local:twopublicsparqlstores_against	"current versions"
8	"current versions of linked data"	local:of_linkeddata	"current versions"
8	"current versions of linked data"	local:currentversions_of	"linked data"
8	"two public sparql stores against current versions"	local:against_currentversions	"two public sparql stores"
8	"two public sparql stores against current versions"	local:twopublicsparqlstores_against	"current versions"
8	"current versions of linked data"	local:of_linkeddata	"current versions"
8	"current versions of linked data"	local:currentversions_of	"linked data"
8	"compare"	vn.role:Patient2	"results from two public sparql stores"
8	"cache"	vn.role:Agent	"they"
8	"cache"	vn.role:Theme	"cache"
9	"propose"	vn.role:Agent	"we"
9	"propose"	local:AM-DIS	"thus"
9	"coherence estimates"	rdfs:subClassOf	"estimates"
9	"coherence"	rdfs:member	"coherence estimates"
9	"split into sub-query"	local:into_sub-query	"split"
9	"split into sub-query"	local:split_into	"sub-query"
9	"propose"	vn.role:Topic	"using"
9	"using"	vn.role:Agent	"we"
9	"coherence estimates"	rdfs:subClassOf	"estimates"
9	"coherence"	rdfs:member	"coherence estimates"
9	"split into sub-query"	local:into_sub-query	"split"
9	"split into sub-query"	local:split_into	"sub-query"
9	"using"	vn.role:Theme	"estimates"
9	"split"	vn.role:Agent	"we"
9	"split"	vn.role:Patient	"query"
9	"split"	vn.role:Instrument	"sub-query"
10	"cached"	vn.role:Theme	"data"
11	"run"	vn.role:Theme	"sub-query"
11	"run"	local:AM-MOD	"should"
11	"run"	local:AM-DIS	"instead"
11	"run"	vn.role:Theme	"live"
12	"sub-query for which"	local:for_which	"sub-query"
12	"sub-query for which"	local:sub-query_for	"which"
12	"have"	vn.role:Experiencer	"sub-query for which"
12	"good fresh"	rdfs:member	"good fresh coverage"
12	"fresh"	rdfs:member	"fresh coverage"
12	"good fresh"	rdfs:subClassOf	"fresh"
12	"good"	rdfs:member	"good fresh"
12	"fresh coverage"	rdfs:subClassOf	"coverage"
12	"good fresh coverage"	rdfs:subClassOf	"coverage"
12	"good fresh coverage"	rdfs:subClassOf	"fresh coverage"
12	"have"	vn.role:Stimulus	"good fresh coverage"
13	"propose"	vn.role:Agent	"we"
13	"propose"	local:AM-DIS	"thus"
13	"coherence estimates"	rdfs:subClassOf	"estimates"
13	"coherence"	rdfs:member	"coherence estimates"
13	"split into sub-query"	local:into_sub-query	"split"
13	"split into sub-query"	local:split_into	"sub-query"
13	"propose"	vn.role:Topic	"using"
13	"using"	vn.role:Agent	"we"
13	"coherence estimates"	rdfs:subClassOf	"estimates"
13	"coherence"	rdfs:member	"coherence estimates"
13	"split into sub-query"	local:into_sub-query	"split"
13	"split into sub-query"	local:split_into	"sub-query"
13	"using"	vn.role:Theme	"estimates"
13	"split"	vn.role:Agent	"we"
13	"split"	vn.role:Patient	"query"
13	"split"	vn.role:Instrument	"sub-query"
14	"evaluate"	vn.role:Agent	"we"
14	"query"	rdfs:member	"query plans"
14	"different hybrid query plans"	rdfs:subClassOf	"plans"
14	"hybrid query plans"	rdfs:subClassOf	"plans"
14	"different hybrid query"	rdfs:member	"different hybrid query plans"
14	"different hybrid query"	rdfs:subClassOf	"query"
14	"different hybrid"	rdfs:subClassOf	"hybrid"
14	"hybrid query"	rdfs:subClassOf	"query"
14	"query plans"	rdfs:subClassOf	"plans"
14	"hybrid"	rdfs:member	"hybrid query"
14	"different"	rdfs:member	"different hybrid"
14	"different hybrid"	rdfs:member	"different hybrid query"
14	"hybrid query"	rdfs:member	"hybrid query plans"
14	"hybrid query plans"	rdfs:subClassOf	"query plans"
14	"different hybrid query plans"	rdfs:subClassOf	"hybrid query plans"
14	"evaluate"	vn.role:Theme	"different hybrid query plans"
15	"evaluate"	vn.role:Agent	"we"
15	"split"	rdfs:member	"split positions"
15	"split positions"	rdfs:subClassOf	"positions"
15	"evaluate"	vn.role:Theme	"split positions"
15	"real-world setup"	rdfs:subClassOf	"setup"
15	"real-world"	rdfs:member	"real-world setup"
15	"evaluate"	local:AM-LOC	"real-world setup"
16	"taken"	vn.role:Theme	"time"
16	"time taken"	local:_taken	"time"
16	"time taken"	local:time_	"taken"
16	"live"	local:AM-TMP	"time taken"
16	"live"	local:AM-MNR	"fully"
16	"live"	vn.role:Location	"execution"
17	"results"	vn.role:Theme	"we"
17	"cached results"	rdfs:subClassOf	"results"
17	"fully cached"	rdfs:subClassOf	"cached"
17	"can improve"	rdfs:subClassOf	"improve"
17	"query execution"	rdfs:subClassOf	"execution"
17	"hybrid query execution"	rdfs:subClassOf	"query execution"
17	"can improve vs. cached results"	local:vs._cachedresults	"can improve"
17	"can improve vs. cached results"	local:canimprove_vs.	"cached results"
17	"results"	vn.role:Location	"show"
17	"show"	vn.role:Agent	"results"
17	"cached results"	rdfs:subClassOf	"results"
17	"fully cached"	rdfs:subClassOf	"cached"
17	"can improve"	rdfs:subClassOf	"improve"
17	"query execution"	rdfs:subClassOf	"execution"
17	"hybrid query execution"	rdfs:subClassOf	"query execution"
17	"can improve vs. cached results"	local:vs._cachedresults	"can improve"
17	"can improve vs. cached results"	local:canimprove_vs.	"cached results"
17	"show"	vn.role:Theme	"can improve vs. cached results"
17	"hybrid query execution"	rdfs:subClassOf	"execution"
17	"query"	rdfs:member	"query execution"
17	"hybrid"	rdfs:member	"hybrid query"
17	"hybrid query"	rdfs:subClassOf	"query"
17	"hybrid query"	rdfs:member	"hybrid query execution"
17	"query execution"	rdfs:subClassOf	"execution"
17	"hybrid query execution"	rdfs:subClassOf	"query execution"
17	"improve"	vn.role:Agent	"hybrid query execution"
17	"improve"	local:AM-MOD	"can"
17	"cached results"	rdfs:subClassOf	"results"
17	"fully cached"	rdfs:subClassOf	"cached"
17	"freshness vs. cached results"	local:vs._cachedresults	"freshness"
17	"freshness vs. cached results"	local:freshness_vs.	"cached results"
17	"improve"	vn.role:Patient	"freshness vs. cached results"
17	"improve"	local:AM-TMP	"reducing"
17	"cached"	local:AM-MNR	"fully"
17	"cached"	vn.role:Theme	"results"
17	"reducing"	vn.role:Patient	"time"
