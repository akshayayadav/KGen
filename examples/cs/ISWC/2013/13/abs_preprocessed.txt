the Protégé plug-in NoHR that allows the user to add a set of logic programming ) rules– suitable e.g. to express exceptions–.
the Protégé plug-in NoHR that allows the user to query the combined knowledge base.
the Protégé plug-in NoHR that allows the user to take an EL _ op ontology.
the Protégé plug-in NoHR that allows the user to add a set of logic programming ) rules– suitable e.g. to express defaults.
the Protégé plug-in NoHR that allows the user to add a set of non-monotonic ) rules– suitable e.g. to express exceptions–.
the Protégé plug-in NoHR that allows the user to add a set of non-monotonic ) rules– suitable e.g. to express defaults.
We present the Protégé plug-in NoHR.
the rules that can be written.
We approach uses the well-founded semantics for MKNF knowledge bases as underlying formalism, so no restriction other than DL-safety is imposed on the rules.
The tool The tool , with the help of OWL 2 EL reasoner ELK, pre-processes the ontology into rules.
The tool The tool builds on the procedure SLG.
rules whose result together with the non-monotonic rules serve as input for the top-down querying engine XSB Prolog.
With the resulting plug-in, even queries to very large ontologies, such as SNOMED CT, augmented with a large number of rules, can be processed at an interactive response time after one initial brief pre-processing period.
an ontology that alone is consistent.
At the same time, We system is able to deal with possible inconsistencies between the non-monotonic rules.
At the same time, We system is able to deal with an ontology.