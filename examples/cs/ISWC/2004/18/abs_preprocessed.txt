As ontology development becomes a collaborative process, developers face the problem of maintaining versions of ontologies akin to maintaining versions of software code.
As ontology development becomes a collaborative process, developers face the problem of maintaining versions of ontologies akin to maintaining versions of documents in large projects.
Traditional versioning systems enable users to examine changes.
Traditional versioning systems enable users to reject changes.
Traditional versioning systems enable users to accept changes.
Traditional versioning systems enable users to compare versions.
However, while versioning systems usually treat software code as text files, a versioning system for ontologies must present structural changes in text representation of ontologies.
However, while versioning systems usually treat software code as text files, a versioning system for ontologies must changes in text representation of ontologies.
However, while versioning systems usually treat text documents as text files, a versioning system for ontologies must changes in text representation of ontologies.
However, while versioning systems usually treat text documents as text files, a versioning system for ontologies must present structural changes in text representation of ontologies.
However, while versioning systems usually treat software code as text files, a versioning system for ontologies must compare.
However, while versioning systems usually treat text documents as text files, a versioning system for ontologies must compare.
the PromptDiff ontology-versioning environment which address these challenges.
In this paper, we present the PromptDiff ontology-versioning environment.
PromptDiff includes an efficient version-comparison algorithm.
an efficient version-comparison algorithm that produces a structural diff between ontologies.
an intuitive user interface for analyzing the changes distinguished by users appearance.
direct access to additional information characterizing the change.
The results are presented to the users through an intuitive user interface for analyzing the changes.
the changes that enables users to view groups of concepts.
the changes that moved.
concepts that were added, deleted,.
The results are presented to the users with direct access to additional information.
the changes that enables users to view concepts of concepts.
the users can then act on the changes, accepting users.
the users can then act on the changes, rejecting users.
We present results of a pilot user study.
a pilot user study that demonstrate the effectiveness of the tool for change management.
We discuss design principles for an end-to-end ontology-versioning environment.
an end-to-end ontology-versioning environment versioning as a component in a general ontology-management framework.
We discuss design principles for position ontology.
position ontology versioning as a component in a general ontology-management framework.