Worst-case optimal multiway join These algorithms have recently gained a lot of attention in the database literature.
These algorithms not only offer strong theoretical guarantees of efficiency, but have also been empirically demonstrated to significantly improve query runtimes for graph databases.
These algorithms not only offer strong theoretical guarantees of efficiency, but have also been empirically demonstrated to significantly improve query runtimes for relational databases.
Despite these promising theoretical and practical results, however, the Semantic Web community has yet to adopt such techniques; to the best of our knowledge, no native RDF database currently supports such join algorithms, where in this paper our demonstrate that this should change.
We propose a novel procedure for evaluating based on an existing worst-case join this algorithm.
We implement this algorithm in Apache Jena.
We propose an adaptation of this algorithm for evaluating SPARQL queries.
We then present experiments over the Berlin and WatDiv SPARQL benchmarks, and a novel benchmark that we propose based on Wikidata that is designed to provide insights into join performance for a more diverse set of basic graph patterns.
We results show that with this new join algorithm, Apache Jena often runs orders of magnitude faster than the base version: Blazegraph.
We results show that with this new join algorithm, Apache Jena often runs orders of magnitude faster than the base version: Virtuoso.
We results show that with this new join algorithm, Apache Jena often runs orders of magnitude faster than two other SPARQL engines: Virtuoso.
We results show that with this new join algorithm, Apache Jena often runs orders of magnitude faster than two other SPARQL engines: Blazegraph.