It is a strength of graph-based data formats, like RDF, that RDF, that they are very flexible with representing data are very flexible with representing data.
To avoid run-time errors, program code that processes highly-flexible data representations exhibits the difficulty that It must always include the most general case, in which attributes might be set-valued or possibly not available.
The Shapes Constraint Language has been devised to enforce constraints on otherwise random data structures.
We present We approach, Type checking using The Shapes Constraint Language -LRB- SHACL -RRB-, for type checking code that queries RDF data graphs validated by a The Shapes Constraint Language shape graph.
To this end, we derive The Shapes Constraint Language shapes from queries and integrate data shapes and query shapes as types into a \ -LRB- \ lambda \ -RRB-- calculus.
We provide a proof of type safety for SHACL.
We provide the formal underpinnings.
A programmer can use We method in order to process RDF data with simplified, type checked code that will not encounter run-time errors -LRB- with usual exceptions as type checking can not prevent accessing empty lists -RRB-.